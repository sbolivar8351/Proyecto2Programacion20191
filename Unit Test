from unittest import TestCase
import 



class TestObtener_complemento(self):
    def test_obtener_complemento(self):
    self.assertEqual(obtener_complemento(G), C)
    self.assertEqual(obtener_complemento(0), 0)
    self.assertEqual(obtener_complemento(T), A)
    self.assertEqual(obtener_complemento(0), 0)
        

class TestGenerar_cadena_complementaria(self):
    def test_generar_cadena_complementaria(self):
    self.assertEqual(cadena_complementaria(GGT), CCA)
    self.assertEqual(obtener_complemento(0), 0)
    self.assertEqual(cadena_complementaria(TTT), AAA)
    self.assertEqual(obtener_complemento(0), 0)
    self.assertEqual(cadena_complementaria(TGTG), ACAC)
    self.assertEqual(obtener_complemento(0), 0)
    self.assertEqual(cadena_complementaria(GTGT), CACA)
    self.assertEqual(obtener_complemento(0), 0)

class TestCalcular_correspondencia(self):
    def test_calcular_correspondencia(self):
    self.assertEqual(correspondencia(CATG,GTAC), 100.0 )
    self.assertEqual(correspondencia(0), 0)    
        
class TestCorresponden(self):
    def test_corresponden(self): 
    self.assertEqual(corresponden(TATA), ATAT)
    self.assertEqual(corresponden(0), 0)  
    self.assertEqual(corresponden(CGCG), GCGC)
    self.assertEqual(corresponden(0), 0)  
        
class TestEs_cadena_valida(self):
    def test_es_cadena_valida(self):
    def assertIsTrue(self, value):
    self.assertIs(value, True)
    def assertIsFalse(self, value):
    self.assertIs(value, False)
        
class TestEs_base(TestCase):
    def test_es_base(self):
        self.fail()
        
class TestEs_subcadena(TestCase):
    def test_es_subcadena(self):
        self.fail()
        
class TestReparar_dano(TestCase):
    def test_reparar_dano(self):
        self.fail()
class TestObtener_secciones(TestCase):
    def test_obtener_secciones(self):
        self.fail()
class TestObtener_complementos(TestCase):
    def test_obtener_complementos(self):
        self.fail()
